apiVersion: v1
kind: Template
metadata:
  name: kafka-lag-autoscaler

parameters:
- name: NAMESPACE
  description: Name of your project (e.g. myproject)

- name: SOURCE_REPOSITORY_URL
  description: The URL of the repository with your application source code.
  displayName: Git repository URI
  required: true
  value: https://github.com/RedHatInsights/kafka-lag-autoscaler.git
- name: SOURCE_REPOSITORY_REF 
  description: Git repository branch to check out, if different from default
  displayName: Git Reference
  value: master

- name: SERVICE_ACCOUNT_NAME
  description: The service account the container will run as
  value: default
- name: DC_NAME
  required: true
- name: METRICS_URL
  required: true
- name: KAFKA_GROUP
  required: true
- name: INTERVAL
  value: "60"
- name: THRESHOLD
  value: "0.7"
- name: MIN_PODS
  value: "1"
- name: MAX_PODS
  value: "10"
- name: LOG_LEVEL
  value: INFO


objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: kafka-lag-autoscaler
    name: kafka-lag-autoscaler
  spec:
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
    output:
      to:
        kind: ImageStreamTag
        name: kafka-lag-autoscaler:latest
    source:
      dockerfile: |-
        FROM registry.access.redhat.com/rhscl/python-36-rhel7

        USER 0

        ENV OC_VERSION=v3.11.0 \
            OC_TAG_SHA=0cbc58b

        RUN curl -sLo /tmp/oc.tar.gz https://github.com/openshift/origin/releases/download/${OC_VERSION}/openshift-origin-client-tools-${OC_VERSION}-${OC_TAG_SHA}-linux-64bit.tar.gz && \
            tar xzvf /tmp/oc.tar.gz -C /tmp/ && \
            mv /tmp/openshift-origin-client-tools-${OC_VERSION}-${OC_TAG_SHA}-linux-64bit/oc /usr/local/bin/ && \
            rm -rf /tmp/oc.tar.gz /tmp/openshift-origin-client-tools-${OC_VERSION}-${OC_TAG_SHA}-linux-64bit

        USER 1001

        WORKDIR /opt/app-root/src
        COPY . .

        RUN scl enable rh-python36 "pip install --upgrade pip && \
                                    pip install pipenv && \
                                    pipenv install --system"

        CMD ["python", "autoscaler.py"]
      git:
        uri: ${SOURCE_REPOSITORY_URL}
        ref: ${SOURCE_REPOSITORY_REF}
      type: Git
    strategy:
      dockerStrategy: {}
      type: Docker
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: ImageStream
  metadata:
    name: kafka-lag-autoscaler
    labels:
      app: kafka-lag-autoscaler
  spec:
    lookupPolicy:
  local: false

- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    labels:
      app: kafka-lag-autoscaler
    name: kafka-lag-autoscaler
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      app: kafka-lag-autoscaler
      deploymentconfig: kafka-lag-autoscaler
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: kafka-lag-autoscaler
          deploymentconfig: kafka-lag-autoscaler
      spec:
        containers:
        - env:
          - name: NAMESPACE
            value: ${NAMESPACE}
          - name: DC_NAME
            value: ${DC_NAME}
          - name: METRICS_URL
            value: ${METRICS_URL}
          - name: KAFKA_GROUP
            value: ${KAFKA_GROUP}
          - name: INTERVAL
            value: ${INTERVAL}
          - name: THRESHOLD
            value: ${THRESHOLD}
          - name: MIN_PODS
            value: ${MIN_PODS}
          - name: MAX_PODS
            value: ${MAX_PODS}
          - name: LOG_LEVEL
            value: ${LOG_LEVEL}
          image: ${NAMESPACE}/kafka-lag-autoscaler:latest
          imagePullPolicy: Always
          name: kafka-lag-autoscaler
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - kafka-lag-autoscaler
        from:
          kind: ImageStreamTag
          name: kafka-lag-autoscaler:latest
          namespace: ${NAMESPACE}
      type: ImageChange
